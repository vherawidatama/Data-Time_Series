# -*- coding: utf-8 -*-
"""Submission - Data Time Series - Victory.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vb-SXATd5tiCw3cVC-XBYJBsBl7s6Na-

<h2><b>Nama : Victory Herawidatama Esa Putra</b></h2>
<h3><b> Email : 18101105@ittelkom-pwt.ac.id </b></h3>

**Source Code yang digunakan untuk upload file csv**
"""

from google.colab import files
file = files.upload()

"""**Import libraries yang digunakan**"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM,Dense,Bidirectional,Dropout

"""**Load data csv**
<p><b>Dan menampilkan 5 data teratas hingga baris total</b> </p>
"""

df = pd.read_csv('tempe.csv')
df.head

"""**Digunakan untuk melihat missing value yang terdapat pada csv**
<p><b>Jika True maka terdapat missing value, jika false berarti tidak ada missing value</b></p>
"""

df.isnull().values.any()

"""**Mendefinisikan dates dengan menunjuk parameter value datetime dan temp pada humidity**"""

dates = df['datetime'].values
temp = df['humidity'].values

"""**Proses plotting figure menggunakan parameter dates dan temp**"""

plt.figure(figsize=(15,5))
plt.plot(dates, temp)
plt.title('Grafik Temperatur berdasarkan Datetime',
          fontsize=20);

"""**Split data untuk training dan test data**"""

x_train, x_test, y_train, y_test = train_test_split(temp, dates, train_size=0.8, test_size=0.2, shuffle=False)

"""**Proses hitung nilai MAE dengan ketentuan MAE < 10% skala data**"""

nmae = (df['humidity'].max() - df['humidity'].min()) * 10/100
print(nmae)

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  series = tf.expand_dims(series, axis=-1)
  ds = tf.data.Dataset.from_tensor_slices(series)
  ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
  ds = ds.flat_map(lambda w: w.batch(window_size + 1))
  ds = ds.shuffle(shuffle_buffer)
  ds = ds.map(lambda w: (w[:-1], w[-1:]))
  return ds.batch(batch_size).prefetch(1)

"""**Modeling dengan metode Sequential dengan penerapan LSTM**"""

model = tf.keras.models.Sequential([
    tf.keras.layers.LSTM(60, return_sequences=True),
    tf.keras.layers.Bidirectional(LSTM(60)),
    tf.keras.layers.Dense(30, activation="relu"),
    tf.keras.layers.Dense(10, activation="relu"),
    tf.keras.layers.Dense(1)
])

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)

model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

train_set = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=1000)
validation_set = windowed_dataset(x_test, window_size=60, batch_size=100, shuffle_buffer=1000)

"""**Pendefinisian fungsi callbacks yang membatasi test model ketika mencapai nilai MAE < 10% data skala**"""

class myCallback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
      if(logs.get('mae')<8.2):
        self.model.stop_training = True
        print("\nMAE pada model telah < 10% skala data")

callbacks = myCallback()

tf.keras.backend.set_floatx('float64')

"""**Proses Training menggunakan model fit dengan epochs 200 menggunakan fungsi callbacks untuk membatasi MAE**"""

test = model.fit(train_set,
                 epochs=200,
                 validation_data = validation_set,
                 callbacks=[callbacks])

"""**Proses Plotting Loss**"""

plt.plot(test.history['loss'])
plt.plot(test.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['train','test'],loc='upper left')
plt.show()

"""**Proses Plotting Akurasi Model**"""

plt.plot(test.history['mae'])
plt.plot(test.history['val_loss'])
plt.title('Akurasi Model')
plt.ylabel('Akurasi')
plt.xlabel('Epoch')
plt.legend(['train','test'],loc='upper left')
plt.show()